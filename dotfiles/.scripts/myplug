#!/usr/bin/env bash
quit() {
  printf "Exiting.\n" && exit 1
}
get_usb_list() {
  if [[ "$mode" = "mount" ]]; then
    partitions=$(lsblk -J \
      | jq -r \
        '.blockdevices | .[] | recurse(.children[]?; .mountpoint == null) | select(has("children") | not) | .name')
  else
    partitions=$(lsblk -J \
      | jq -r \
        '.blockdevices | .[] | recurse(.children[]?; .mountpoint != null) | select(.mountpoint != null) | .name')
  fi
  usb_devices=$(find /dev/disk/by-id | grep -P "^/dev/disk/by-id/usb.+part\d{1,2}$")
  while read -r device_id; do
    while read -r partition; do
      usb_partition="$(readlink -f "$device_id")"
      if [[ "${usb_partition#/dev/}" = "$partition" ]]; then
        usb_list="$usb_partition\n$usb_list"
      fi
    done <<< "$partitions"
  done <<< "$usb_devices"
  printf "$usb_list"
}
confirm_action() {
  if [[ "$mode" = "mount" ]]; then
    confirm_prompt="Confirm mounting [94m$device[0m to [94m$mountpoint[0m ?"
  else
    confirm_prompt="Confirm unmounting [94m$device[0m from [94m$mountpoint[0m ?"
  fi
  read -p "[?] $confirm_prompt [Y/n]: " confirm
  confirm=${confirm:-Y}
  if [[ "$confirm" != "Y" ]]; then
    printf "[-] Rejected.\n" && quit
  fi

  if [[ "$mode" = "mount" ]]; then
    sudo mount "$device" "$mountpoint" && printf "[#] Done.\n" && exit 0
  else
    sudo umount "$mountpoint" && printf "[#] Done.\n" && exit 0
  fi
}

# prompt mode (mount or unmount)
mode=$(printf "mount\numount" \
  | fzf --prompt="Action: ")
if [[ -z "$mode" ]]; then
  printf "[-] No mode selected.\n" && quit
fi

usb_list="$(get_usb_list)"

if [[ -z "$usb_list" ]]; then
  if [[ "$mode" = "mount" ]]; then
    printf "[-] No usb device to mount.\n" && quit
  else
    printf "[-] No usb device to unmount.\n" && quit
  fi
fi

# print devices infos
usb_list_joined="$(printf "$usb_list" | tr -s "\n" " ")"
if [[ "$mode" = "mount" ]]; then
  printf "[#] Mountable usb devices:\n"
  lsblk -plo NAME,TYPE,SIZE $usb_list_joined
else
  printf "[#] Unmountable usb devices:\n"
  lsblk -plo NAME,MOUNTPOINT,TYPE,SIZE $usb_list_joined
fi

if [[ "$mode" = "mount" ]]; then
  device_prompt="Device to mount"
else
  device_prompt="Device to unmount"
fi
device=$(printf "$usb_list" \
  | fzf --prompt="$device_prompt :")
if [[ -z "$device" ]]; then
  printf "[-] No device selected.\n" && quit
else
  printf "[+] Device \033[94m$device\033[0m selected.\n"
  if [[ "$mode" = "mount" ]]; then
    mount_base="/mnt/$USER"
    used_default_mounts=$(lsblk -J \
      | jq -r \
        '.blockdevices | .[] | recurse(.children[]?; .mountpoint != null) | select(.mountpoint != null) | .mountpoint' \
      | awk '/^\/media\/[a-z0-9]+\/mount[0-9]$/')
    possible_mounts=$(ls -1 "$mount_base")
    while read -r possiblemount; do
      found=0
      while read -r usedmount; do
        if [[ "$usedmount" = "$mount_base/$possiblemount" ]]; then
          found=1
        fi
      done <<< "$used_default_mounts"
      if [[ $found -eq 0 ]]; then
        avail_mounts="$possiblemount\n$avail_mounts"
      fi
    done <<< "$possible_mounts"

    if [[ -z "$avail_mounts" ]]; then
      printf "[#] No predefined mountpoint available\n"
      read -p "[?] Specify one manually ? [Y/n]: " manual
      manual=${manual:-Y}
      if [[ "$manual" != "Y" ]]; then
        printf "[-] No mountpoint specified.\n" && quit
      fi

      while true; do
        trap quit SIGINT
        read -p "[?] Mountpoint: " mountpoint
        mountpoint=$(realpath "$mountpoint")
        if [[ $? != 0 ]]; then
          printf "[-] Invalid path.\n" && continue
        fi
        if [[ -z "$mountpoint" ]]; then
          printf "[-] Invalid path.\n" && continue
        fi
        if [[ ! -d "$mountpoint" ]]; then
          printf "[-] Specified path is not a directory.\n" && continue
        fi
        if [[ -n "$(ls -A "$mountpoint")" ]]; then
          printf "[-] Specified directory is not empty.\n" && continue
        fi
        used=$(lsblk -J \
          | jq \
            '.blockdevices | .[] | recurse(.children[]?; .mountpoint != null) | select(.mountpoint != null) | .mountpoint' \
          | tr -d "\"" \
          | grep -P "^$mountpoint$")
        if [[ -n "$used" ]]; then
          printf "[-] Specified directory is already the mountpoint of another device.\n" && continue
        fi
        break
      done
    else
      mountpoint=$(printf "$avail_mounts" \
        | fzf --prompt="Device mountpoint: " --tac)
      if [[ -z "$mountpoint" ]]; then
        printf "[-] No mountpoint selected.\n" && quit
      else
        mountpoint="$mount_base/$mountpoint"
      fi
    fi
    printf "[+] Mountpoint \033[94m$mountpoint\033[0m selected.\n"
    confirm_action
  else
    mountpoint=$(lsblk -nplo MOUNTPOINT "$device")
    confirm_action
  fi
fi


